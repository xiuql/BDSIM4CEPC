//
// File generated by rootcint at Fri Nov 20 23:08:03 2015

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME dOdOdIsrcdIBDSOutputROOTEventSamplerDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "BDSOutputROOTEventSamplerDict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void BDSOutputROOTEventSampler_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_BDSOutputROOTEventSampler(void *p = 0);
   static void *newArray_BDSOutputROOTEventSampler(Long_t size, void *p);
   static void delete_BDSOutputROOTEventSampler(void *p);
   static void deleteArray_BDSOutputROOTEventSampler(void *p);
   static void destruct_BDSOutputROOTEventSampler(void *p);
   static void streamer_BDSOutputROOTEventSampler(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::BDSOutputROOTEventSampler*)
   {
      ::BDSOutputROOTEventSampler *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::BDSOutputROOTEventSampler >(0);
      static ::ROOT::TGenericClassInfo 
         instance("BDSOutputROOTEventSampler", ::BDSOutputROOTEventSampler::Class_Version(), "./BDSOutputROOTEventSampler.hh", 7,
                  typeid(::BDSOutputROOTEventSampler), ::ROOT::DefineBehavior(ptr, ptr),
                  &::BDSOutputROOTEventSampler::Dictionary, isa_proxy, 0,
                  sizeof(::BDSOutputROOTEventSampler) );
      instance.SetNew(&new_BDSOutputROOTEventSampler);
      instance.SetNewArray(&newArray_BDSOutputROOTEventSampler);
      instance.SetDelete(&delete_BDSOutputROOTEventSampler);
      instance.SetDeleteArray(&deleteArray_BDSOutputROOTEventSampler);
      instance.SetDestructor(&destruct_BDSOutputROOTEventSampler);
      instance.SetStreamerFunc(&streamer_BDSOutputROOTEventSampler);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::BDSOutputROOTEventSampler*)
   {
      return GenerateInitInstanceLocal((::BDSOutputROOTEventSampler*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::BDSOutputROOTEventSampler*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr BDSOutputROOTEventSampler::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *BDSOutputROOTEventSampler::Class_Name()
{
   return "BDSOutputROOTEventSampler";
}

//______________________________________________________________________________
const char *BDSOutputROOTEventSampler::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::BDSOutputROOTEventSampler*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int BDSOutputROOTEventSampler::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::BDSOutputROOTEventSampler*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void BDSOutputROOTEventSampler::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::BDSOutputROOTEventSampler*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *BDSOutputROOTEventSampler::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::BDSOutputROOTEventSampler*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void BDSOutputROOTEventSampler::Streamer(TBuffer &R__b)
{
   // Stream an object of class BDSOutputROOTEventSampler.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      { TString R__str; R__str.Streamer(R__b); samplerName = R__str.Data(); }
      R__b >> n;
      {
         vector<float> &R__stl =  energy;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<float> &R__stl =  x;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<float> &R__stl =  y;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b >> z;
      {
         vector<float> &R__stl =  xp;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<float> &R__stl =  yp;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<float> &R__stl =  zp;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<float> &R__stl =  X;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<float> &R__stl =  Y;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b >> Z;
      {
         vector<float> &R__stl =  Xp;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<float> &R__stl =  Yp;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<float> &R__stl =  Zp;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<float> &R__stl =  weight;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<int> &R__stl =  partID;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<int> &R__stl =  parentID;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<int> &R__stl =  turnNumber;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b >> S;
      R__b.CheckByteCount(R__s, R__c, BDSOutputROOTEventSampler::IsA());
   } else {
      R__c = R__b.WriteVersion(BDSOutputROOTEventSampler::IsA(), kTRUE);
      TObject::Streamer(R__b);
      { TString R__str = samplerName.c_str(); R__str.Streamer(R__b);}
      R__b << n;
      {
         vector<float> &R__stl =  energy;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<float>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<float> &R__stl =  x;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<float>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<float> &R__stl =  y;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<float>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b << z;
      {
         vector<float> &R__stl =  xp;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<float>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<float> &R__stl =  yp;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<float>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<float> &R__stl =  zp;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<float>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<float> &R__stl =  X;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<float>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<float> &R__stl =  Y;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<float>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b << Z;
      {
         vector<float> &R__stl =  Xp;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<float>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<float> &R__stl =  Yp;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<float>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<float> &R__stl =  Zp;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<float>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<float> &R__stl =  weight;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<float>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<int> &R__stl =  partID;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<int>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<int> &R__stl =  parentID;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<int>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<int> &R__stl =  turnNumber;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<int>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b << S;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void BDSOutputROOTEventSampler::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class BDSOutputROOTEventSampler.
      TClass *R__cl = ::BDSOutputROOTEventSampler::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "samplerName", (void*)&samplerName);
      R__insp.InspectMember("string", (void*)&samplerName, "samplerName.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "n", &n);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "energy", (void*)&energy);
      R__insp.InspectMember("vector<float>", (void*)&energy, "energy.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x", (void*)&x);
      R__insp.InspectMember("vector<float>", (void*)&x, "x.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y", (void*)&y);
      R__insp.InspectMember("vector<float>", (void*)&y, "y.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z", &z);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xp", (void*)&xp);
      R__insp.InspectMember("vector<float>", (void*)&xp, "xp.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yp", (void*)&yp);
      R__insp.InspectMember("vector<float>", (void*)&yp, "yp.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zp", (void*)&zp);
      R__insp.InspectMember("vector<float>", (void*)&zp, "zp.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "X", (void*)&X);
      R__insp.InspectMember("vector<float>", (void*)&X, "X.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Y", (void*)&Y);
      R__insp.InspectMember("vector<float>", (void*)&Y, "Y.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Z", &Z);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Xp", (void*)&Xp);
      R__insp.InspectMember("vector<float>", (void*)&Xp, "Xp.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Yp", (void*)&Yp);
      R__insp.InspectMember("vector<float>", (void*)&Yp, "Yp.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Zp", (void*)&Zp);
      R__insp.InspectMember("vector<float>", (void*)&Zp, "Zp.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "weight", (void*)&weight);
      R__insp.InspectMember("vector<float>", (void*)&weight, "weight.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "partID", (void*)&partID);
      R__insp.InspectMember("vector<int>", (void*)&partID, "partID.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "parentID", (void*)&parentID);
      R__insp.InspectMember("vector<int>", (void*)&parentID, "parentID.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "turnNumber", (void*)&turnNumber);
      R__insp.InspectMember("vector<int>", (void*)&turnNumber, "turnNumber.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "S", &S);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_BDSOutputROOTEventSampler(void *p) {
      return  p ? new(p) ::BDSOutputROOTEventSampler : new ::BDSOutputROOTEventSampler;
   }
   static void *newArray_BDSOutputROOTEventSampler(Long_t nElements, void *p) {
      return p ? new(p) ::BDSOutputROOTEventSampler[nElements] : new ::BDSOutputROOTEventSampler[nElements];
   }
   // Wrapper around operator delete
   static void delete_BDSOutputROOTEventSampler(void *p) {
      delete ((::BDSOutputROOTEventSampler*)p);
   }
   static void deleteArray_BDSOutputROOTEventSampler(void *p) {
      delete [] ((::BDSOutputROOTEventSampler*)p);
   }
   static void destruct_BDSOutputROOTEventSampler(void *p) {
      typedef ::BDSOutputROOTEventSampler current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_BDSOutputROOTEventSampler(TBuffer &buf, void *obj) {
      ((::BDSOutputROOTEventSampler*)obj)->::BDSOutputROOTEventSampler::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::BDSOutputROOTEventSampler

namespace ROOTDict {
   void vectorlEfloatgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEfloatgR_Dictionary();
   static void *new_vectorlEfloatgR(void *p = 0);
   static void *newArray_vectorlEfloatgR(Long_t size, void *p);
   static void delete_vectorlEfloatgR(void *p);
   static void deleteArray_vectorlEfloatgR(void *p);
   static void destruct_vectorlEfloatgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<float>*)
   {
      vector<float> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<float>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<float>", -2, "vector.dll", 0,
                  typeid(vector<float>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEfloatgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<float>) );
      instance.SetNew(&new_vectorlEfloatgR);
      instance.SetNewArray(&newArray_vectorlEfloatgR);
      instance.SetDelete(&delete_vectorlEfloatgR);
      instance.SetDeleteArray(&deleteArray_vectorlEfloatgR);
      instance.SetDestructor(&destruct_vectorlEfloatgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<float> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<float>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEfloatgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<float>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEfloatgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<float> : new vector<float>;
   }
   static void *newArray_vectorlEfloatgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<float>[nElements] : new vector<float>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEfloatgR(void *p) {
      delete ((vector<float>*)p);
   }
   static void deleteArray_vectorlEfloatgR(void *p) {
      delete [] ((vector<float>*)p);
   }
   static void destruct_vectorlEfloatgR(void *p) {
      typedef vector<float> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<float>

namespace ROOTDict {
   void vectorlEintgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEintgR_Dictionary();
   static void *new_vectorlEintgR(void *p = 0);
   static void *newArray_vectorlEintgR(Long_t size, void *p);
   static void delete_vectorlEintgR(void *p);
   static void deleteArray_vectorlEintgR(void *p);
   static void destruct_vectorlEintgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<int>*)
   {
      vector<int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<int>", -2, "prec_stl/vector", 49,
                  typeid(vector<int>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEintgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<int>) );
      instance.SetNew(&new_vectorlEintgR);
      instance.SetNewArray(&newArray_vectorlEintgR);
      instance.SetDelete(&delete_vectorlEintgR);
      instance.SetDeleteArray(&deleteArray_vectorlEintgR);
      instance.SetDestructor(&destruct_vectorlEintgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<int> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEintgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<int>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int> : new vector<int>;
   }
   static void *newArray_vectorlEintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int>[nElements] : new vector<int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEintgR(void *p) {
      delete ((vector<int>*)p);
   }
   static void deleteArray_vectorlEintgR(void *p) {
      delete [] ((vector<int>*)p);
   }
   static void destruct_vectorlEintgR(void *p) {
      typedef vector<int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<int>

/********************************************************
* ../src/BDSOutputROOTEventSamplerDict.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableBDSOutputROOTEventSamplerDict();

extern "C" void G__set_cpp_environmentBDSOutputROOTEventSamplerDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("BDSOutputROOTEventSampler.hh");
  G__cpp_reset_tagtableBDSOutputROOTEventSamplerDict();
}
#include <new>
extern "C" int G__cpp_dllrevBDSOutputROOTEventSamplerDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* BDSOutputROOTEventSampler */
static int G__BDSOutputROOTEventSamplerDict_216_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   BDSOutputROOTEventSampler* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new BDSOutputROOTEventSampler[n];
     } else {
       p = new((void*) gvp) BDSOutputROOTEventSampler[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new BDSOutputROOTEventSampler;
     } else {
       p = new((void*) gvp) BDSOutputROOTEventSampler;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BDSOutputROOTEventSamplerDictLN_BDSOutputROOTEventSampler));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BDSOutputROOTEventSamplerDict_216_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   BDSOutputROOTEventSampler* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new BDSOutputROOTEventSampler(*((string*) G__int(libp->para[0])));
   } else {
     p = new((void*) gvp) BDSOutputROOTEventSampler(*((string*) G__int(libp->para[0])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BDSOutputROOTEventSamplerDictLN_BDSOutputROOTEventSampler));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BDSOutputROOTEventSamplerDict_216_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((BDSOutputROOTEventSampler*) G__getstructoffset())->Clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BDSOutputROOTEventSamplerDict_216_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) BDSOutputROOTEventSampler::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BDSOutputROOTEventSamplerDict_216_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) BDSOutputROOTEventSampler::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BDSOutputROOTEventSamplerDict_216_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) BDSOutputROOTEventSampler::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BDSOutputROOTEventSamplerDict_216_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      BDSOutputROOTEventSampler::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BDSOutputROOTEventSamplerDict_216_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((BDSOutputROOTEventSampler*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BDSOutputROOTEventSamplerDict_216_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) BDSOutputROOTEventSampler::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BDSOutputROOTEventSamplerDict_216_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) BDSOutputROOTEventSampler::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BDSOutputROOTEventSamplerDict_216_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) BDSOutputROOTEventSampler::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BDSOutputROOTEventSamplerDict_216_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) BDSOutputROOTEventSampler::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__BDSOutputROOTEventSamplerDict_216_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   BDSOutputROOTEventSampler* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new BDSOutputROOTEventSampler(*(BDSOutputROOTEventSampler*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BDSOutputROOTEventSamplerDictLN_BDSOutputROOTEventSampler));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef BDSOutputROOTEventSampler G__TBDSOutputROOTEventSampler;
static int G__BDSOutputROOTEventSamplerDict_216_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (BDSOutputROOTEventSampler*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((BDSOutputROOTEventSampler*) (soff+(sizeof(BDSOutputROOTEventSampler)*i)))->~G__TBDSOutputROOTEventSampler();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (BDSOutputROOTEventSampler*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((BDSOutputROOTEventSampler*) (soff))->~G__TBDSOutputROOTEventSampler();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__BDSOutputROOTEventSamplerDict_216_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   BDSOutputROOTEventSampler* dest = (BDSOutputROOTEventSampler*) G__getstructoffset();
   *dest = *(BDSOutputROOTEventSampler*) libp->para[0].ref;
   const BDSOutputROOTEventSampler& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* BDSOutputROOTEventSampler */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncBDSOutputROOTEventSamplerDict {
 public:
  G__Sizep2memfuncBDSOutputROOTEventSamplerDict(): p(&G__Sizep2memfuncBDSOutputROOTEventSamplerDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncBDSOutputROOTEventSamplerDict::*p)();
};

size_t G__get_sizep2memfuncBDSOutputROOTEventSamplerDict()
{
  G__Sizep2memfuncBDSOutputROOTEventSamplerDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceBDSOutputROOTEventSamplerDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__BDSOutputROOTEventSamplerDictLN_BDSOutputROOTEventSampler))) {
     BDSOutputROOTEventSampler *G__Lderived;
     G__Lderived=(BDSOutputROOTEventSampler*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BDSOutputROOTEventSamplerDictLN_BDSOutputROOTEventSampler),G__get_linked_tagnum(&G__BDSOutputROOTEventSamplerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableBDSOutputROOTEventSamplerDict() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__BDSOutputROOTEventSamplerDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__BDSOutputROOTEventSamplerDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__BDSOutputROOTEventSamplerDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__BDSOutputROOTEventSamplerDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__BDSOutputROOTEventSamplerDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__BDSOutputROOTEventSamplerDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__BDSOutputROOTEventSamplerDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__BDSOutputROOTEventSamplerDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__BDSOutputROOTEventSamplerDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__BDSOutputROOTEventSamplerDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__BDSOutputROOTEventSamplerDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__BDSOutputROOTEventSamplerDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__BDSOutputROOTEventSamplerDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__BDSOutputROOTEventSamplerDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__BDSOutputROOTEventSamplerDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__BDSOutputROOTEventSamplerDictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__BDSOutputROOTEventSamplerDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__BDSOutputROOTEventSamplerDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__BDSOutputROOTEventSamplerDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__BDSOutputROOTEventSamplerDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* BDSOutputROOTEventSampler */
static void G__setup_memvarBDSOutputROOTEventSampler(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__BDSOutputROOTEventSamplerDictLN_BDSOutputROOTEventSampler));
   { BDSOutputROOTEventSampler *p; p=(BDSOutputROOTEventSampler*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__BDSOutputROOTEventSamplerDictLN_string),-1,-1,2,"samplerName=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"n=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__BDSOutputROOTEventSamplerDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,2,"energy=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__BDSOutputROOTEventSamplerDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,2,"x=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__BDSOutputROOTEventSamplerDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,2,"y=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,2,"z=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__BDSOutputROOTEventSamplerDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,2,"xp=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__BDSOutputROOTEventSamplerDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,2,"yp=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__BDSOutputROOTEventSamplerDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,2,"zp=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__BDSOutputROOTEventSamplerDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,2,"X=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__BDSOutputROOTEventSamplerDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,2,"Y=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,2,"Z=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__BDSOutputROOTEventSamplerDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,2,"Xp=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__BDSOutputROOTEventSamplerDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,2,"Yp=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__BDSOutputROOTEventSamplerDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,2,"Zp=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__BDSOutputROOTEventSamplerDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,2,"weight=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__BDSOutputROOTEventSamplerDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,2,"partID=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__BDSOutputROOTEventSamplerDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,2,"parentID=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__BDSOutputROOTEventSamplerDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,2,"turnNumber=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,2,"S=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__BDSOutputROOTEventSamplerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarBDSOutputROOTEventSamplerDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncBDSOutputROOTEventSampler(void) {
   /* BDSOutputROOTEventSampler */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__BDSOutputROOTEventSamplerDictLN_BDSOutputROOTEventSampler));
   G__memfunc_setup("BDSOutputROOTEventSampler",2436,G__BDSOutputROOTEventSamplerDict_216_0_1, 105, G__get_linked_tagnum(&G__BDSOutputROOTEventSamplerDictLN_BDSOutputROOTEventSampler), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BDSOutputROOTEventSampler",2436,G__BDSOutputROOTEventSamplerDict_216_0_2, 105, G__get_linked_tagnum(&G__BDSOutputROOTEventSamplerDictLN_BDSOutputROOTEventSampler), -1, 0, 1, 1, 1, 0, "u 'string' - 0 - samplerNameIn", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,G__BDSOutputROOTEventSamplerDict_216_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__BDSOutputROOTEventSamplerDict_216_0_4, 85, G__get_linked_tagnum(&G__BDSOutputROOTEventSamplerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&BDSOutputROOTEventSampler::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__BDSOutputROOTEventSamplerDict_216_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&BDSOutputROOTEventSampler::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__BDSOutputROOTEventSamplerDict_216_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&BDSOutputROOTEventSampler::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__BDSOutputROOTEventSamplerDict_216_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&BDSOutputROOTEventSampler::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__BDSOutputROOTEventSamplerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__BDSOutputROOTEventSamplerDict_216_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__BDSOutputROOTEventSamplerDict_216_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&BDSOutputROOTEventSampler::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__BDSOutputROOTEventSamplerDict_216_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&BDSOutputROOTEventSampler::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__BDSOutputROOTEventSamplerDict_216_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&BDSOutputROOTEventSampler::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__BDSOutputROOTEventSamplerDict_216_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&BDSOutputROOTEventSampler::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("BDSOutputROOTEventSampler", 2436, G__BDSOutputROOTEventSamplerDict_216_0_16, (int) ('i'), 
G__get_linked_tagnum(&G__BDSOutputROOTEventSamplerDictLN_BDSOutputROOTEventSampler), -1, 0, 1, 1, 1, 0, "u 'BDSOutputROOTEventSampler' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~BDSOutputROOTEventSampler", 2562, G__BDSOutputROOTEventSamplerDict_216_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__BDSOutputROOTEventSamplerDict_216_0_18, (int) ('u'), G__get_linked_tagnum(&G__BDSOutputROOTEventSamplerDictLN_BDSOutputROOTEventSampler), -1, 1, 1, 1, 1, 0, "u 'BDSOutputROOTEventSampler' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncBDSOutputROOTEventSamplerDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalBDSOutputROOTEventSamplerDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcBDSOutputROOTEventSamplerDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__BDSOutputROOTEventSamplerDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__BDSOutputROOTEventSamplerDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__BDSOutputROOTEventSamplerDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__BDSOutputROOTEventSamplerDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__BDSOutputROOTEventSamplerDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR = { "vector<float,allocator<float> >" , 99 , -1 };
G__linked_taginfo G__BDSOutputROOTEventSamplerDictLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__BDSOutputROOTEventSamplerDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__BDSOutputROOTEventSamplerDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__BDSOutputROOTEventSamplerDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__BDSOutputROOTEventSamplerDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__BDSOutputROOTEventSamplerDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__BDSOutputROOTEventSamplerDictLN_BDSOutputROOTEventSampler = { "BDSOutputROOTEventSampler" , 99 , -1 };
G__linked_taginfo G__BDSOutputROOTEventSamplerDictLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__BDSOutputROOTEventSamplerDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableBDSOutputROOTEventSamplerDict() {
  G__BDSOutputROOTEventSamplerDictLN_TClass.tagnum = -1 ;
  G__BDSOutputROOTEventSamplerDictLN_TBuffer.tagnum = -1 ;
  G__BDSOutputROOTEventSamplerDictLN_TMemberInspector.tagnum = -1 ;
  G__BDSOutputROOTEventSamplerDictLN_TObject.tagnum = -1 ;
  G__BDSOutputROOTEventSamplerDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR.tagnum = -1 ;
  G__BDSOutputROOTEventSamplerDictLN_string.tagnum = -1 ;
  G__BDSOutputROOTEventSamplerDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__BDSOutputROOTEventSamplerDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__BDSOutputROOTEventSamplerDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__BDSOutputROOTEventSamplerDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__BDSOutputROOTEventSamplerDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__BDSOutputROOTEventSamplerDictLN_BDSOutputROOTEventSampler.tagnum = -1 ;
  G__BDSOutputROOTEventSamplerDictLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__BDSOutputROOTEventSamplerDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableBDSOutputROOTEventSamplerDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__BDSOutputROOTEventSamplerDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__BDSOutputROOTEventSamplerDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__BDSOutputROOTEventSamplerDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__BDSOutputROOTEventSamplerDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__BDSOutputROOTEventSamplerDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR);
   G__get_linked_tagnum_fwd(&G__BDSOutputROOTEventSamplerDictLN_string);
   G__get_linked_tagnum_fwd(&G__BDSOutputROOTEventSamplerDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__BDSOutputROOTEventSamplerDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__BDSOutputROOTEventSamplerDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__BDSOutputROOTEventSamplerDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__BDSOutputROOTEventSamplerDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__BDSOutputROOTEventSamplerDictLN_BDSOutputROOTEventSampler),sizeof(BDSOutputROOTEventSampler),-1,62720,(char*)NULL,G__setup_memvarBDSOutputROOTEventSampler,G__setup_memfuncBDSOutputROOTEventSampler);
   G__get_linked_tagnum_fwd(&G__BDSOutputROOTEventSamplerDictLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__BDSOutputROOTEventSamplerDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
}
extern "C" void G__cpp_setupBDSOutputROOTEventSamplerDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupBDSOutputROOTEventSamplerDict()");
  G__set_cpp_environmentBDSOutputROOTEventSamplerDict();
  G__cpp_setup_tagtableBDSOutputROOTEventSamplerDict();

  G__cpp_setup_inheritanceBDSOutputROOTEventSamplerDict();

  G__cpp_setup_typetableBDSOutputROOTEventSamplerDict();

  G__cpp_setup_memvarBDSOutputROOTEventSamplerDict();

  G__cpp_setup_memfuncBDSOutputROOTEventSamplerDict();
  G__cpp_setup_globalBDSOutputROOTEventSamplerDict();
  G__cpp_setup_funcBDSOutputROOTEventSamplerDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncBDSOutputROOTEventSamplerDict();
  return;
}
class G__cpp_setup_initBDSOutputROOTEventSamplerDict {
  public:
    G__cpp_setup_initBDSOutputROOTEventSamplerDict() { G__add_setup_func("BDSOutputROOTEventSamplerDict",(G__incsetup)(&G__cpp_setupBDSOutputROOTEventSamplerDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initBDSOutputROOTEventSamplerDict() { G__remove_setup_func("BDSOutputROOTEventSamplerDict"); }
};
G__cpp_setup_initBDSOutputROOTEventSamplerDict G__cpp_setup_initializerBDSOutputROOTEventSamplerDict;

