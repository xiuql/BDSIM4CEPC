/* BDSIM code.    Version 1.0
   Author: Grahame A. Blair, Royal Holloway, Univ. of London.
   Last modified 3.11.2002
   Copyright (c) 2002 by G.A.Blair.  ALL RIGHTS RESERVED. 
*/
//
// ********************************************************************
// * DISCLAIMER                                                       *
// *                                                                  *
// * The following disclaimer summarizes all the specific disclaimers *
// * of contributors to this software. The specific disclaimers,which *
// * govern, are listed with their locations in:                      *
// *   http://cern.ch/geant4/license                                  *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.                                                             *
// *                                                                  *
// * This  code  implementation is the  intellectual property  of the *
// * GEANT4 collaboration.                                            *
// * By copying,  distributing  or modifying the Program (or any work *
// * based  on  the Program)  you indicate  your  acceptance of  this *
// * statement, and all its terms.                                    *
// ********************************************************************
//
//
// $Id: BDSConvParticleChange.icc,v 1.1 2005/01/22 17:05:30 agapov Exp $
// GEANT4 tag $Name:  $
//
// 
inline
 G4Step* BDSConvParticleChange::UpdateStepInfo(G4Step* pStep)
{
  // use fUseEBForAll instead of fUseEB
  // fUseEB = fUseEBForAll;
  return G4VParticleChange::UpdateStepInfo(pStep);
}

inline 
 G4double BDSConvParticleChange::GetEnergyChange() const
{
  return theEnergyChange;
}

inline
 void BDSConvParticleChange::SetEnergyChange(G4double Energy)
{
  theEnergyChange = Energy;
}

inline 
 const G4ThreeVector* BDSConvParticleChange::GetMomentumChange() const
{
  return &theMomentumDirectionChange;
}

inline 
 void BDSConvParticleChange::SetMomentumChange(
						G4double Px, 
						G4double Py, 
						G4double Pz	)
{
  theMomentumDirectionChange.setX(Px);
  theMomentumDirectionChange.setY(Py);
  theMomentumDirectionChange.setZ(Pz);
}

inline 
 void BDSConvParticleChange::SetMomentumChange(const G4ThreeVector& P)
{
  theMomentumDirectionChange = P;
}

inline 
 const G4ThreeVector* BDSConvParticleChange::GetMomentumDirectionChange() const
{
  return &theMomentumDirectionChange;
}

inline 
 void BDSConvParticleChange::SetMomentumDirectionChange(
						G4double Px, 
						G4double Py, 
						G4double Pz	)
{
  theMomentumDirectionChange.setX(Px);
  theMomentumDirectionChange.setY(Py);
  theMomentumDirectionChange.setZ(Pz);
}

inline 
 void BDSConvParticleChange::SetMomentumDirectionChange(const G4ThreeVector& P)
{
  theMomentumDirectionChange = P;
}

inline 
 const G4ThreeVector* BDSConvParticleChange::GetPolarizationChange() const
{
  return &thePolarizationChange;
}

inline 
 void BDSConvParticleChange::SetPolarizationChange( const G4ThreeVector& finalPoralization)
{
  thePolarizationChange = finalPoralization;
}

inline 
 void BDSConvParticleChange::SetPolarizationChange(
						G4double Px, 
						G4double Py, 
						G4double Pz	)
{
  thePolarizationChange.setX(Px);
  thePolarizationChange.setY(Py);
  thePolarizationChange.setZ(Pz);
}

inline 
 const G4ThreeVector* BDSConvParticleChange::GetPositionChange() const
{
  return &thePositionChange;
}

inline 
  G4double  BDSConvParticleChange::GetProperTimeChange() const
{
  return  theProperTimeChange;
}

inline 
  void BDSConvParticleChange::SetProperTimeChange(G4double tau)
{
  theProperTimeChange = tau;

}

inline 
 void BDSConvParticleChange::SetPositionChange(const G4ThreeVector& finalPosition)
{
  thePositionChange= finalPosition;
}

inline 
 void BDSConvParticleChange::SetPositionChange(G4double x,G4double y, G4double z)
{
  thePositionChange.setX(x);
  thePositionChange.setY(y);
  thePositionChange.setZ(z);
}

inline
 G4ThreeVector BDSConvParticleChange::GetGlobalPosition(const G4ThreeVector& displacement) const
{
  return thePositionChange + displacement;
}


inline
 G4double  BDSConvParticleChange::GetGlobalTime(G4double timeDelay) const
{
      //  Convert the time delay to the global time.
  return theTimeChange + timeDelay;
}

inline 
  G4double  BDSConvParticleChange::GetTimeChange() const
{
  return  theTimeChange;
}

inline 
  void BDSConvParticleChange::SetTimeChange(G4double t)
{
  theTimeChange = t;
}

inline 
  G4double  BDSConvParticleChange::GetMassChange() const
{
  return  theMassChange;
}

inline 
  void BDSConvParticleChange::SetMassChange(G4double t)
{
  theMassChange = t;
}


inline 
  G4double  BDSConvParticleChange::GetChargeChange() const
{
  return  theChargeChange;
}

inline 
  void BDSConvParticleChange::SetChargeChange(G4double t)
{
  theChargeChange = t;
}

inline 
  G4double  BDSConvParticleChange::GetWeightChange() const
{
  return  theWeightChange;
}

inline 
  void BDSConvParticleChange::SetWeightChange(G4double w)
{
  theWeightChange = w;
  theParentWeight = w;
}

inline  
  G4ThreeVector BDSConvParticleChange::CalcMomentum(G4double          energy,
			    	              G4ThreeVector   direction,
			                      G4double           mass      
					      ) const
{
  G4double tMomentum = sqrt(energy*energy + 2*energy*mass);
  return direction*tMomentum; 
}

//inline
//  void BDSConvParticleChange::SwOnAllEB()
//{
//  fUseEBForAll = true;
//}

//inline void BDSConvParticleChange::SwOffAllEB()
//{
//  fUseEBForAll = false;
//}

// gab:
inline 
  void BDSConvParticleChange::SetMuonWeight(G4double aMuonWeight)
{
  theMuonWeight = aMuonWeight;
}






