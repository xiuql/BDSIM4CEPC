\input texinfo @c -*-texinfo-*-
@c %**start of header0.4
@setfilename bdsim.info
@settitle BDSIM User's Manual v0.6-dev
@set lastupdate @today{}
@set revision 0.6-dev
@c %**end of header

@setchapternewpage off

@c @copying
@c Copyright @copyright{} 2004-2013 Royal Holloway, University of London.
@c @end copying


@titlepage
@title BDSIM User's Manual v0.6-dev
@author I. Agapov, S. T. Boogert, L. C. Deacon, 
@author S. Malton, L. Nevay, J.Snuverink
@author revision @value{revision}, last updated @value{lastupdate}
@end titlepage
@setcontentsaftertitlepage

@contents



@node Top, Intro, (dir), (dir)
@top BDSIM v0.6 User's Manual


This file is updated automatically from @file{manual.texi}, last updated on
@value{lastupdate}.


@c @insertcopying

@menu
* Intro::                       
* Installation::                
* Lattice::      
* Visualization::                        
* Physics:: 
* Output::                 
* Geometry::                    
* Fields::     
* Bunch description formats::
* Known Issues::
* References::                  
@end menu


@c cccccccccccccccccccccccccccccccccccccccccc
@c
@c cccccccccccccccccccccccccccccccccccccccccc

@node Intro, Installation, Top, Top
@chapter About BDSIM

BDSIM is a Geant4 (@cite{1}) extension toolkit for simulation of particle
transport in accelerator beamlines.
It provides a collection of classes representing typical accelerator
components, a collection of physics processes for fast tracking, procedures of
``on the fly'' geometry construction and interfacing to ROOT analysis 
(@cite{2}).
 

@c cccccccccccccccccccccccccccccccccccccccccc
@c
@c cccccccccccccccccccccccccccccccccccccccccc

@node Installation, Lattice, Intro, Top
@chapter Obtaining, Installing and Running


@code{BDSIM} can be downloaded from @*
@uref{https://twiki.ph.rhul.ac.uk/twiki/bin/view/PP/JAI/BdSim}.
This site also contains information on documentation, projects and installation.
Alternatively, a development version is from the SVN repository, instructions are at
@uref{https://twiki.ph.rhul.ac.uk/twiki/bin/view/PP/JAI/BDsimInstall}.

Download the tarball and extract the source code. Make sure Geant4 is installed
and appropriate environment variables defined.
Then go through the configuration procedure by running the @code{./configure}
script.

@code{./configure}


It will create a Makefile from template defined in Makefile.in. You may want to
edit the Makefile manually to meet your needs (if your CLHEP version is greater
than 2.x put -DCLHEP_VERSION=9). Then start the compilation by typing

@code{make}

If the compilation is successful the @code{bdsim} executable should be created 
in $(BDSIM)/bin/$(ARCH) where $(BDSIM) is the directory specified during 
configuration, and $(ARCH) is of the form $(OSTYPE)-$(COMPILER), eg Linux-g++. 
Next, set up the (DY)LD_LIBRARY_PATH variable to
point to the ./parser directory, and also to the directory where libbdsim.so 
is if building shared libraries.


@code{BDSIM} is invoked by the command
@code{bdsim} @option{options}

where the options are

@example
--file=<filename>    : specify the lattice file
--output=<fmt>       : output format (root|ascii), default ascii
--outfile=<file>     : output file name. Will be appended with _N
                       where N = 0, 1, 2, 3... etc.
--vis_mac=<file>     : visualization macro script, default vis.mac
--help               : display this message
--verbose            : display general parameters before run
--verbose_event      : display information for every event
--verbose_step=N     : display tracking information after each step
--verbose_event_num  : display tracking information for event number N
--batch              : batch mode - no graphics
--outline=<file>     : print geometry/optics info to <file>
--outline_type=<fmt> : type of outline format
                       where fmt = optics | survey
 --materials         : list materials included in BDSIM by default
@end example




To run BDSIM one first has to define the beamline geometry in a file which is
then passed to BDSIM via the @code{--file} command line option, for example

@example
bdsim --file=line.gmad --output=root --batch
@end example


The next section describes how to do it in more detail. 

@c cccccccccccccccccccccccccccccccccccccccccc
@c
@c cccccccccccccccccccccccccccccccccccccccccc

@node Lattice, Visualization, Installation, Top
@chapter Lattice description

@menu
* Program structure::
* Arithmetical expressions::
* Physical elements::
* Run control::                       
@end menu

The beamline, beam properties and physics processes are specified in the input
file written in the GMAD language which is a variation of MAD-X language
(@cite{3}) extended to handle sophisticated geometry and parameters relevant
to radiation transport.
GMAD is described in this section.
Examples of input files can be found in the @code{BDSIM} distribution in the
@code{examples} directory.
In order to convert a MAD file into a GMAD one, a utility called
@code{mad2gmad.sh} is provided in the @code{utils} directory.


The following MAD commands are not supported:

@itemize @bullet
@item @code{assign}
@item @code{bmpm}
@item @code{btrns}
@item @code{envelope}
@item @code{optics}@footnote{To dump the optical properties of the lattice
one can invoke @code{bdsim} with the @code{--outline=file.txt
--outline_type=optics} options.}
@item @code{title}
@item @code{option}
@item @code{plot}
@item @code{print}
@item @code{return}
@item @code{survey}@footnote{To compute the coordinates of all machine
elements in a global reference system one can invoke @code{bdsim} with the 
@code{--outline=file.txt --outline_type=survey} options}
@item @code{title}
@end itemize

The following MAD commands:
@itemize @bullet
@item @code{moni}
@item @code{monitor}
@item @code{wire}
@item @code{prof}
@end itemize
are replaced with the @code{marker} command.



@node Program structure
@section Program structure


A GMAD program consists of a sequence of element definitions and control
commands.
For example, tracking a 1 GeV electron beam through a FODO cell will require a
file like this:

@example

@code{mk: marker;}
@code{qf: quadrupole, l=0.5*m, k1=0.1*m^-2;}
@code{qd: quadrupole, l=0.5*m, k1=-0.1*m^-2;}
@code{d: drift, l=0.5*m;}
@code{fodo : line=(qf,d,qd,d,mk);}
@code{use, period=fodo;}
@code{beam, particle="e-",energy=1*GeV;}
@code{option, beampipeRadius=5*cm, beampipeThickness=5*mm;}
@code{sample, range=mk;}

@end example

Generally, the user has to define a sequence of elements (with @code{drift},
@code{quadrupole}, @code{line} etc.), then select the beamline with the
@code{use} command and specify beam parameters and other options with
@code{beam} and @code{option} commands.
The @code{sample} and @code{csample} commands control what sort of information
will be recorded during the execution.


The parser is case sensitive. However, for convenience of porting lattice 
descriptions from MAD the keywords can be both lower and upper case.
The GMAD language is discussed in more detail in this section.


@node Arithmetical expressions
@section Arithmetical expressions

Throughout the program a standard set of arithmetical expressions is available.
Every expression is ended with a semicolon, for example:

@example

x=1;
y=2.5-x;
z=sin(x) + log(y) - 8e5;

@end example

@c The variables then could be used along with numerical constants. The
@c @code{if-else} clause is also available, for example:

@c @example

@c z=1;
@c if(z<2){
@c  y=2.5-x;
@c }
@c else{
@c  y=15;
@c }

@c @end example

@c IN MY TESTS THE ; AFTER y=2.5-x IS NOT ACCEPTED BY THE PARSER....

@c Several expressions can be grouped into one block by means of the @code{@{}
@c and @code{@}} symbols or the @code{begin} and @code{end} keywords.


Available binary operators are: @code{+}, @code{-}, @code{*}, @code{/},
@code{^}

Available unary operators are: @code{+}, @code{-}

Available boolean operators are: @code{<}, @code{>}, @code{<=}, @code{>=},
@code{<>}, @code{==}

Available functions @footnote{see add_func(..) in @code{parser/gmad.cc}} are:
@itemize @bullet
@item @code{sqrt}
@item @code{cos}
@item @code{sin}
@item @code{exp}
@item @code{log}
@item @code{tan}
@item @code{asin}
@item @code{acos}
@item @code{atan}
@item @code{abs}
@end itemize

@node Physical elements
@section Physical elements and Entities

@menu
* coordinate-system::
* units::
* marker::
* drift::
* rbend::
* sbend::
* quadrupole::
* sextupole::
* octupole::
* multipole::
* rf::
* rcol::
* ecol::
* muspoiler::
* solenoid::
* kickers::
* transform3d::
* element::
* line::
* matdef::
* laser::
* spec keyword::
* Element number::
* Element attributes::
* Editing apertures::
* Material table::
@end menu


GMAD implements almost all the standard MAD elements, but also allows to define
arbitrary geometric entities and magnetic field configurations.
The geometry description capabilities are extended by using ``drivers'' to
other geometry description formats, which makes interfacing and standardisation
easier.
The syntax of a physical element declaration is

@code{element_name : element_type, attributes;}

for example

@code{qd : quadrupole, l = 0.1*m, k1 = 0.01;}

@code{element_type} can be of basic type or inherited. Allowed basic types are

@itemize @bullet
@item marker
@item drift
@item rbend
@item sbend
@item quadrupole
@item sextupole
@item octupole
@item multipole
@item vkick
@item hkick
@item rf
@item rcol
@item ecol
@item solenoid
@item laser
@item transform3d
@item element
@end itemize


All elements except @code{marker}, @code{element}, @code{ecol}, and @code{rcol}
are modeled by default with an inner cylindrical beampipe and an outer 
cylindrical volume. (FOR MAD COMPATIBILITY @code{sbend} SHOULD BE A TORUS).
The beampipe outer radius and thickness are defined by the 
global @code{beampipeRadius} and @code{beampipeThickness}
options; the beampipe outer radius can be redefined for almost every element
with the @code{aper} option.
The beampipe material is defined by the global @code{beampipeMaterial} option
(default: ``Vacuum''), while the residual gas in the beampipe at the moment
cannot be changed by the user and is set to ``Vacuum''.
@c NOT YET READY 
@c defined by  the @code{beampipeGas} option (default: ``Vacuum'').
The outer volume is represented (with the exception of the @code{drift} 
element) by a cylinder with inner radius equal to the beampipe outer radius and
with outer radius given by default by the global @code{boxSize} option, which
can usually be overridden with the ``outR'' option.

An already defined element can be used as a new element type. The child element
will have the attributes of the parent. 

@example

q:quadrupole, l=1*m, k1=0.1;
qq:q,k1=0.2;

@end example


@node coordinate-system
@subsection Coordinate system

The usual accelerator coordinate system is assumed (see @cite{3}).

@node units
@subsection Units

In GMAD the SI units are used. 

@multitable @columnfractions .4 .6
@item length @tab
 [m] (metres)
@item time @tab
 [s] (seconds)
@item angle @tab
 [rad] (radians)
@item quadrupole coefficient @tab
 [m@math{^{-2}}]
@item multipole coefficient 2n poles @tab
 [m@math{^{-n}}]
@item electric voltage @tab
 [MV] (Megavolts)
@item electric field strength @tab
 [MV/m]
@item particle energy @tab
 [GeV]
@item particle mass @tab
 [GeV/c@math{^2}]
@item particle momentum @tab
 [GeV/c]
@item beam current @tab
 [A] (Amperes)
@item particle charge @tab
 [e] (elementary charges)
@item emittances @tab
 [pi m mrad]
@item density @tab
 [g/cm@math{^3}]
@item temperature @tab
 [K] (Kelvin)
@item pressure @tab
 [atm] (atmosphere)
@item mass number @tab
 [g/mol]
@end multitable 

There are some predefined numerical values@footnote{see add_var(..) in @code{parser/gmad.cc}} are:

@multitable  @columnfractions .1 .4 .1 .4
@item pi     @tab 3.14159265358979
@c @item me     @tab electron rest mass - DOESN'T SEEM TO BE IMPLEMENTED IN parser/gmad.cc
@c @item mp     @tab proton rest mass - DOESN'T SEEM TO BE IMPLEMENTED IN parser/gmad.cc
@item GeV    @tab 1              @tab m      @tab 1             
@item eV     @tab @math{10^{-9}} @tab cm     @tab @math{10^{-2}}
@item KeV    @tab @math{10^{-6}} @tab mm     @tab @math{10^{-3}}
@item MeV    @tab @math{10^{-3}} @tab um     @tab @math{10^(-6)}
@item TeV    @tab @math{10^3}    @tab nm     @tab @math{10^(-9)}
@item MV     @tab 1              @tab s      @tab 1             
@item Tesla  @tab 1              @tab ms     @tab @math{10^{-3}}
@item rad    @tab 1              @tab us     @tab @math{10^{-6}}
@item mrad   @tab @math{10^{-3}} @tab ns     @tab @math{10^{-9}}
@item clight @tab @math{2.99792458*10^8}
@end multitable

for example, one can write either 100*eV or 0.1*KeV when energy constants 
are concerned.

@node marker
@subsection @code{marker}

@code{marker} has no effect (no volume is associated to it) but allows one to
identify a position in the beam line (say, where a sampler will be placed).
It has no attributes.

Example:

@example

@code{m1 : marker;}

@end example

@node drift
@subsection @code{drift}

@code{drift} defines a straight drift space.
Its volume contains only the vacuum beampipe (no outer iron cylinder).

Attributes:
@itemize @bullet 
@item @code{l} - length [m] (default 0)
@item @code{aper} - aperture [m] (default same as @code{beampipeRadius})
@end itemize

Example:

@example

@code{d13 : drift, l=0.5*m;}

@end example

@node rbend
@subsection @code{rbend}

@code{rbend} defines a rectangular bending magnet.
Attributes:
@itemize @bullet 
@item @code{l} - length [m] (default 0)
@item @code{angle} - bending angle [rad] (default 0)
@item @code{B} - magnetic field [T] 
@item @code{aper} - aperture [m] (default same as beampipe radius)
@item @code{outR} - external radius [m] of magnet (default set to @code{aper}+22cm)
@item @code{material} - the magnet material (default set to ``Iron'')
@item THE CODE ALSO ALLOWS FOR A QUADRUPOLE FIELD GRADIENT K1..
@end itemize

when @code{B} is set, this defines a magnet with appropriate field strength 
and @code{angle} is not taken into account. Otherwise, the value of @code{B} 
that corresponds to bending angle @code{angle} for a particle in use (defined 
by the @code{beam} command, with appropriate energy and rest mass) is 
calculated and used in the simulations.

Example :

@example

@code{rb1 : rbend, l=0.5*m, angle = 0.01;}

@end example

@node sbend
@subsection @code{sbend}

@code{sbend} defines a sector bending magnet.
Attributes:
@itemize @bullet 
@item @code{l} - length [m] (default 0)
@item @code{angle} - bending angle [rad] (default 0)
@item @code{B} - magnetic field [T] 
@item @code{aper} - aperture [m] (default same as beampipe radius)
@item @code{outR} - external radius [m] of magnet (default set to @code{aper}+22cm)
@item @code{material} - the magnet material (default set to ``Iron'')
@item THE CODE ALSO ALLOWS FOR A QUADRUPOLE GRADIENT K1..
@end itemize

The meaning of @code{B} and @code{angle} is the same as for @code{rbend}.

Example :

@example

@code{sb1 : sbend, l=0.5*m, angle = 0.01;}

@end example

@node quadrupole
@subsection @code{quadrupole}

@code{quadrupole} defines a quadrupole.
Attributes:
@itemize @bullet 
@item @code{l} - length [m] (default 0)
@item @code{k1} - normal quadrupole coefficient
k1 = @math{1/(B \rho)} @math{dB_y / dx} [m@math{^{-2}}]
Positive @code{k1} means horizontal focusing of positively charged particles
(default 0). @math{dB_y / dx} is the magnetic field gradient, while 
@math{(B \rho)} is the magnetic ``rigidity'': 
@math{B\rho} (T*m) = p(GeV)/(0.299792458 * |charge(e)|)
@item @code{ks1} - skew quadrupole coefficient
ks1 =  @math{1/(B \rho)} @math{dB_y / dx} [m@math{^{-2}}]
where (x,y) is now a coordinate system rotated by 45 degrees around s with respect to the normal one.(default 0). 
@item @code{tilt} - roll angle [rad] about the longitudinal axis, clockwise.
@item @code{aper} - aperture [m] (default same as beampipe radius)@
@item @code{outR} - external radius [m] of magnet (default set to @code{aper}+22cm)
@item @code{material} - the magnet material (default set to ``Iron'')
@end itemize

Example :

@example

@code{qf : quadrupole, l=0.5*m , k1 = 0.5 , tilt = 0.01;}

@end example

@node sextupole
@subsection @code{sextupole}

@code{sextupole} defines a sextupole.
Attributes:
@itemize @bullet 
@item @code{l} - length [m] (default 0)
@item @code{k2} - normal sextupole coefficient
k2 = @math{1/(B \rho)} @math{d^2 B_y / dx^2} [m@math{^{-3}}]
@item @code{ks2} - skew sextupole coefficient
ks2 = @math{1/(B \rho)} @math{d^2 B_y / dx^2} [m@math{^{-3}}]
where (x,y) is now a coordinate system rotated by 30 degrees around s with respect to the normal one.(default 0). 
@item @code{tilt} - roll angle [rad] about the longitudinal axis, clockwise.
@item @code{aper} - aperture [m] (default same as beampipe radius)
@item @code{outR} - external radius [m] of magnet (default set to @code{aper}+22cm)
@item @code{material} - the magnet material (default set to ``Iron'')
@end itemize

Example :

@example

@code{sf : sextupole, l=0.5*m , k2 = 0.5 , tilt = 0.01;}

@end example

@node octupole
@subsection @code{octupole}

@code{octupole} defines an octupole.
Attributes:
@itemize @bullet 
@item @code{l} - length [m] (default 0)
@item @code{k3} - normal octupole coefficient
k3 = @math{1/(B \rho)} @math{d^3 B_y / dx^3} [m@math{^{-4}}]
Positive @code{k3} means horizontal focusing of positively charged particles. (default 0)
@item @code{ks3} - skew octupole coefficient
ks3 = @math{1/(B \rho)} @math{d^3 B_y / dx^3} [m@math{^{-4}}]
where (x,y) is now a coordinate system rotated by 30 degrees around s with respect to the normal one.(default 0). 
@item @code{tilt} - roll angle [rad] about the longitudinal axis, clockwise.
@item @code{outR} - external radius [m] of magnet (default set to @code{aper}+22cm)
@item @code{material} - the magnet material (default set to ``Iron'')
@end itemize

Example :

@example

@code{of : octupole, l=0.5*m , k3 = 0.5 , tilt = 0.01;}

@end example

@node multipole
@subsection @code{multipole}

@code{multipole} defines a multipole.
Attributes:
@itemize @bullet 
@item @code{l} - length [m] (default 0)
@item @code{knl} - normal multipole
knl[n] = @math{1/(B \rho)} @math{d^n B_y / dx^n} [m@math{^{-(n+1)}}]
@item @code{ksl} - skew multipole
ksl[n] = @math{1/(B \rho)} @math{d^n B_y / dx^n} [m@math{^{-(n+1)}}]
where (x,y) is now a coordinate system rotated by 30 degrees around s with respect to the normal one.(default 0). 
@item @code{tilt} - roll angle [rad] about the longitudinal axis, clockwise.
@item @code{outR} - external radius [m] of magnet (default set to @code{aper}+22cm)
@item @code{material} - the magnet material (default set to ``Iron'')
@end itemize

Example :

@example

@code{mul : multipole, l=0.5*m , knl=@{ 0,0,1 @} , ksl=@{ 0,0,0 @};}

@end example
Note that both @code{knl} and @code{ksl} are required and must contain the same 
number of parameters.
 
@node rf
@subsection @code{rf}

@code{rf} defines an rf cavity. Attributes:
@itemize @bullet 
@item @code{l} - length [m] (default 0)
@item @code{gradient} - field gradient [MV / m]
@item @code{material} - the cavity material (default set to ``Iron'')
@end itemize

Example : 

@example

@code{rf1 : rf,l=5*m, gradient = 10 * MV / m; }

@end example

@node rcol
@subsection @code{rcol}

@code{rcol} defines a rectangular collimator (the aperture is a rectangle, the
external profile in the transverse plane is a square).
The longitudinal collimator structure is not taken into account. To do this the
user has to describe the collimator with the generic type @code{element}.
Attributes:

@itemize @bullet 
@item @code{l} - length [m] (default 0)
@item @code{xsize} - horizontal aperture [m] (default set to @code{boxSize})
@item @code{ysize} - vertical aperture [m] (default set to @code{boxSize})
@item @code{outR} - external extent [m] in x and y of the collimator (default set to @code{boxSize})
@item @code{material} - collimator material (default set to ``Graphite'')
@end itemize

Example : 

@example

@code{col1 : rcol,l=0.4*m, xsize=2*mm, ysize=1*mm, material="W"}

@end example


@node ecol
@subsection @code{ecol}

@code{ecol} defines an elliptical collimator (the aperture is an ellipse, the
external profile in the transverse plane is a square).
Here, again, the longitudinal collimator structure is not taken into account. 
Attributes:

@itemize @bullet 
@item @code{l} - length [m] (default 0)
@item @code{xsize} - horizontal aperture [m] (default set to @code{boxSize})
@item @code{ysize} - vertical aperture [m] (default set to @code{boxSize})
@item @code{outR} - limits external extent [m] in x and y of the collimator (default set to @code{boxSize})
@item @code{material} - collimator material (default set to ``Graphite'')
@end itemize


Example : 

@example

@code{col2 : ecol,l=0.4*m, xsize=2*mm, ysize=1*mm, material="W"}

@end example

@node muspoiler

@subsection @code{muspoiler}

@code{muspoiler} defines a muon spoiler, which is a rotationally megnetised iron cylinder with an inner radius, outer radius, magnetic field strength and length. 
Attributes:

@itemize @bullet 
@item @code{l} - length [m] (default 0)
@item @code{inR} - inner radius [m] (default is outer beam pipe radius)
@item @code{outR} - outer radius [m] (default set to @code{boxSize})
@item @code{B} - magnetic field [T] (default set to 1)
@end itemize


Example : 

@example

@code{musp1 : muspoiler,l=5*m, inR=1*cm, outR=60*cm, B=1.5}

@end example

@node solenoid
@subsection @code{solenoid}
Not yet implemented
@*

@node kickers
@subsection @code{hkick} and @code{vkick}

@code{hkick} and @code{vkick} are equivalent to a @code{rbend} and an 
@code{rbend} rotated by 90 degrees respectively. However, @code{hkick} and 
@code{vkick} do not rotate the frame of reference.
@*

@node transform3d
@subsection @code{transform3d}

An arbitrary 3-dimensional transformation of the coordinate system is done by
placing a @code{transform3d} element in the beamline. Attributes:

@itemize @bullet
@item @code{x} = @code{<x offset>}
@item @code{y} = @code{<y offset>}
@item @code{z} = @code{<z offset>}
@item @code{phi} = @code{<phi Euler angle>}
@item @code{theta} = @code{<theta Euler angle>}
@item @code{psi} = @code{<psi Euler angle>}
@end itemize

Example: 

@example

@code{rot : transform3d, psi=pi/2}

@end example


@node element
@subsection @code{element}

All the elements are in principle examples of a general type @code{element} 
which can represent an arbitrary geometric entity with arbitrary B field maps.
Attributes:

@itemize @bullet
@item @code{geometry} = @code{<geometry_description>}
@item @code{bmap} = @code{<bmap_description> }
@c @item @code{emap} = @code{<emap_description>}
@item @code{outR} - limits external extent component box size (default set to @code{tunnelRadius}@math{/2})
@end itemize


Descriptions are of the form 

@code{format:filename}

where @code{filename} is the path to the 
file with the geometry description and @code{format} defines the geometry description format.
The possible formats are given in @ref{Geometry}.


Example :

@example

@code{qq : element, geometry ="mokka:qq.sql", bmap ="mokka:qq.bmap";}

@end example
@c @float Figure, fig1
@c @caption{ An example a cryomodule described as @code{element} }
@c @image{cryomodule,,4in}
@c @end float


@node line
@subsection @code{line}

Elements are grouped into sequences by the @code{line} command.

@code{@var{line_name} : line=(@var{element_1},@var{element_2},...);}

where @var{element_n} can be any element or another line. Lines can also be 
reversed using @code{@var{line_name} : line=-(@var{line_2})}, or within 
another line by @code{line=(@var{line_1},-@var{line_2})}. Reversing a line also 
reverses all nested lines within.

Example : 

A sequence of FODO cells can be defines as

@example

@code{qf: quadrupole, l=0.5, k1=0.1};
@code{qd: quadrupole, l=0.5, k1=-0.1};
@code{d: drift, l=0.5};
@code{fodo : line=(qf,d,qd,d)};
@code{section : line=(fodo,fodo,fodo);}
@code{beamline : line=(section,section,section);}

@end example

@node matdef
@subsection @code{matdef}

To define a material the @code{matdef} keyword must be used.


If the material is composed by a single element, it can be defined using the following syntax:
@footnote{In this case, in @code{src/BDSDetectorConstruction.cc} the BDSMaterials::AddMaterial(name, Z, A, density)
method is called, which in turns (@code{src/BDSMaterials.cc}) invokes the Geant4 G4Material
constructor: G4Material(name, Z, A, density);}

@code{<material> : matdef, Z=<int>, A=<double>, density=<double>,
                   T=<double>, P=<double>, state=<char*>;}

Attributes
@itemize @bullet
@item @code{Z} - atomic number
@item @code{A} - mass number [g/mol]
@item @code{density} - density in [g/cm@math{^3}]
@item @code{T} - temperature in [K] (default set to 300)
@item @code{P} - pressure [atm] (default set to 1)
@item @code{state} - ``solid'', ``liquid'' or ``gas'' (default set to ``solid'')
@end itemize

Example:
@example

@code{iron : matdef, Z=26, A=55.845, density=7.87}

@end example


If the material is made up by several components, first of all each of them must be specified with the @code{atom} keyword:
@footnote{In this case, in @code{src/BDSDetectorConstruction.cc} the BDSMaterials::AddElement(name, symbol, Z, A)
method is called, which in turns (@code{src/BDSMaterials.cc}) invokes the Geant4 G4Element 
constructor: G4Element(name, symbol, Z, A);}

@code{<element> : atom, Z=<int>, A=<double>, symbol=<char*>;}

Attributes:
@itemize @bullet
@item @code{Z} - atomic number
@item @code{A} - mass number [g/mol]
@item @code{symbol} - atom symbol
@end itemize

Then the compound material can be specified in two manners:

1) If the number of atoms of each component in material unit is known, the following syntax can be used:
@footnote{In this case, in @code{src/BDSDetectorConstruction.cc} the
BDSMaterials::AddMaterial(name, density, state, temp, pressure, list<char*> itsComponents, list<G4int> itsComponentsWeights) 
method is called, which in turns (@code{src/BDSMaterials.cc}) invokes the Geant4 G4Material constructor:
G4Material(name, density, (G4int)itsComponents.size(), state, temp, pressure). Then each component is added with a call to the
G4Material::AddElement(G4string , G4int ) method.}

@example

<material> : matdef, density=<double>, T=<double>, P=<double>,
             state=<char*>, components=<[list<char*>]>,
             componentsWeights=<@{list<int>@}>;

@end example

Attributes
@itemize @bullet
@item @code{density} - density in [g/cm@math{^3}]
@item @code{T} - temperature in [K] (default set to 300)
@item @code{P} - pressure in [atm] (default set to 1)
@item @code{state} - ``solid'', ``liquid'' or ``gas'' (default set to ``solid'')@item @code{components} - list of symbols for material components
@item @code{componentsWeights} -  number of atoms of each component in material unit, in order
@end itemize

Example:

@example

@code{niobium : atom, symbol="Nb", z=41, a=92.906;}
@code{titanium : atom, symbol="Ti", z=22, a=47.867;}
@code{NbTi : matdef, density=5.6, temperature=4.0, ["Nb","Ti"], @{1,1@}}

@end example


2) On the other hand, if the mass fraction of each component is known, the following syntax can be used:
@footnote{In this case, in @code{src/BDSDetectorConstruction.cc} the
BDSMaterials::AddMaterial(name, density, state, temp, pressure, list<char*> itsComponents, list<G4double> itsComponentsFractions) 
method is called, which in turns (@code{src/BDSMaterials.cc}) invokes the Geant4 G4Material constructor:
G4Material(name, density, (G4int)itsComponents.size(), state, temp, pressure). Then each component is added with a call to the
G4Material::AddElement(G4string , G4double ) method.}

@example

<material> : matdef, density=<double>, T=<double>, P=<double>,
             state=<char*>, components=<[list<char*>]>, 
             componentsFractions=<@{list<double>@}>;

@end example

Attributes
@itemize @bullet
@item @code{density} - density in [g/cm@math{^3}]
@item @code{T} - temperature in [K] (default set to 300)
@item @code{P} - pressure in [atm] (default set to 1)
@item @code{state} - ``solid'', ``liquid'' or ``gas'' (default set to ``solid'')@item @code{components} - list of symbols for material components
@item @code{componentsFractions} - mass fraction of each component in material unit, in order
@end itemize

Example:

@example

@code{samarium : atom, symbol="Sm", z= 62, a=150.4;}
@code{cobalt : atom, symbol="Co", z= 27, a=58.93;}
@code{SmCo : matdef, density=8.4, temperature=300.0, ["Sm","Co"], 
       @{0.338,0.662@}}

@end example

The second syntax can be used also to define materials which are composed by
other materials (and not by atoms).

Nb: Square brackets are required for the list of element symbols, curly 
brackets for the list of weights or fractions.

@c @subsection pipe

@c the beam pipe parameters are used for particle tracking inside elements when the use geometry is
@c not defined. The beam pipe radius is assigned by the @code{pipe} command 

@c @code{pipe, range=<range>, range=, r=, thickness=, material=<material>};

@c Attributes
@c @itemize @bullet
@c @item @code{range} - element range to assign the radius for
@c @item @code{r} - radius [m]
@c @item @code{thickness} - thickness [m]
@c @item @code{material} - beam pipe material
@c @end itemize

@c Example :

@c Supposing we want to define a copper beam pipe for ...  

@c @example
@c @code{iron : material, Z=26, A=55.845, density=7.87, temperature=;}
@c @code{copper : material, Z=, A=, density=, temperature=;;}

@c @code{fodo : line=(qf,d,qd,d);}
@c @code{pipe, range=qf/qd, r=0.2, thickness = 0.1, material=copper; }
@c @code{pipe, range=d[2], r=0.1, thickness = 0.05, material=iron; }

@c @end example

@node laser
@subsection @code{laser}

@code{laser} defines a drift section with a laser beam inside.
The laser is considered to be the intersection of the laser beam with the 
volume of the drift section. Attributes:

@itemize @bullet
@item @code{l} - length of the drift section [m]
@item @code{x,y,z} - components of the laser direction vector
@item @code{waveLength} - laser wave length [m]
@end itemize

@example
@code{laserWire : laser, l=1*um,x=1,y=0,z=0,waveLength=532*nm}
@end example
@*

@subsection @code{gas}
To be implemented in v0.5

@c @code{gas} command is used to introduce gas into the beam pipe. 
@c @footnote{in realistic situations the gas profile can vary in transverse dimensions.
@c This is not taken into account for a)technical reasons b)one does not know the profile anyway}

@c @code{gas, period=, components=@{c1,c2,...@},parts=@{p1,p2,...@} };

@c where
@c @itemize @bullet
@c @item @code{c1,c2,...} - gas components names 
@c @item @code{p1,p2,...} - parts (100%=1). They need not sum up to 1.
@c @end itemize 

@c the gas components are defined by

@c @code{c1 : gas, name=<name>, A=<A>, Z=<Z>, profile=<profile_name>};

@c where
@c @itemize @bullet
@c @item @code{<Z>} - atomic number
@c @item @code{<A>} - mass number
@c @item @code{<profile_name>} - name of gas profile definition 
@c @end itemize 

@c the gas profile is defined as 

@c @code{<profile_name> : gas_profile = (<element>:<pressure>, <element>:<pressure>) };

@c where
@c @itemize @bullet
@c @item @code{<element>} - name of the beamline component
@c @item @code{<pressure>} - gas pressure (bar)
@c @end itemize 


@c The gas pressure is then interpolated between the points where it is defined.
@c Issuing multiple @code{gas} commands acts additively.

@c Example :

@c To introduce the gas into a fodo cell

@c @example

@c @code{...element definitions...}

@c @code{fodo : line=(qf,d,qd,d);}

@c @code{co2 : gas, name="c02", Z=22,A=44,profile=co2profile;}
@c @code{h20 : gas, name="h2", Z=1,A=1,profile=co2profile;}

@c @code{c02profile : gas_profile = (qd:0.01, qf:0.02*nbar,d:0.03*nbar); }
@c @code{h20profile : gas_profile = (qd:0.04, qf:0.01*nbar,d:0.03*nbar); }

@c @code{gas, period=fodo,components= @{ c02,h20@},parts=@{0.7,0.8@}; }


@c @end example 

@c @subsection @code{twiss}

@node spec keyword
@subsection @code{spec} keyword
This was removed in v0.4 and no longer has an effect. For setting the outer
radius of a quadrupole, use the @code{outR} parameter in the same way as for 
other elements.

@node Element number
@subsection Element number

When several elements with the same name are present in the beamline they can be accessed by their 
number in the sequence. In the next example the sampler is put before the second drift@footnote{See @ref{Known Issues}}

@example

@code{bl:line=(d,d,d);}
@code{sample,range=d[2];}

@end example

@node Element attributes
@subsection Element attributes

Element attributes such as length, multipole coefficients etc, can be accessed by putting square brackets
after the element name, e.g.

@example

@code{x=d[l];}

@end example

@node Editing apertures
@subsection Editing apertures

Apertures can be set after an element has already been defined by writing the element name followed by a semicolon followed by the attributes. For example, if quadrupole @code{qf} has already been defined then its aperture can be set to 4 mm using:

@example
@code{qf: aper=4*mm;}
@end example

@node Material table
@subsection Material table

There is a set of predefined materials for use in elements such as collimators, e.g. 

@multitable @columnfractions .5 .5
@item ``Air''                @tab ``LiquidHelium''
@item ``Aluminium''          @tab ``NbTi''       
@item ``BeamGasPlugMat''     @tab ``Niobium''    
@item ``Beryllium''          @tab ``Silicon''    
@item ``CarbonMonoxide''     @tab ``SmCo''       
@item ``CarbonSteel''        @tab ``Soil''       
@item ``Concrete''           @tab ``Titanium''   
@item ``Copper''             @tab ``TitaniumAlloy'' 
@item ``Graphite''           @tab ``Tungsten''   
@item ``Invar''              @tab ``Vacuum''     
@item ``Iron''               @tab ``Vanadium''   
@item ``LaserVac''           @tab ``Water''      
@item ``Lead''               @tab ``WeightIron'' 
@item ``LeadTungstate''
@end multitable

Currently ``Air'', ``CarbonMonoxide'' and ``Vacuum'' are gas at T=300K,
p=10@math{^{-12}} bar: both ``Air'' and ``Vacuum'' are a N(80):O(20)
mixture, ``CarbonMonoxide is composed of CO molecules.

There are also predefined elements (i.e. atoms) that can be used for building
composite materials:  "H", "He", "Be", "C" , "N", "O", "Al", "Si", "P" , "S",
"Ca", "Ti", ``V" , "Mn", "Fe", "Co", "Ni", "Cu", "Nb", "Sm", "W" , "Pb".

For more details see the file @code{src/BDSMaterials.cc} or run the command
@code{bdsim --materials} from the command line.

@node Run control
@section Run control and output

@menu
* option::
* beam::
* sample and csample::
* dump::
* use::
@end menu

The execution control is performed in the GMAD input file through @code{option} and @code{sample}
commands. How the results are recorded is controlledby the @code{sample} command.
When the visualization is turned on, it is also controlled through Geant4 command prompt
@*

@node option
@subsection @code{option}

Most of the options in @code{bdsim} are set up by the command

@code{option, <name>=value, ...;}
@*

The following options influence the geometry:

@multitable @columnfractions .3 .7
@item @code{beampipeRadius} @tab default beampipe outer radius [m] 
@item @code{beampipeThickness} @tab default beampipe thickness [m]
@item @code{pipeMaterial} @tab default beampipe material
@item @code{boxSize} @tab default accelerator component size [m]
@item @code{vacMaterial} @tab the beam pipe gas material (default ``Vacuum'', which is composed of 48.2\% H, 22.1\% C and 29.7 \% O, and has a temperature of 300K)
@item @code{vacuumPressure} @tab the pressure of the beam pipe gas in bar (default 1e-12)
@item @code{buildTunnel} @tab whether to build a tunnel (default=0)
@item @code{buildTunnelFloor} @tab whether to add a floor to the tunnel (default=0)
@item @code{tunnelRadius} @tab tunnel radius [m]
@item @code{tunnelThickness} @tab the thickness of the tunnel wall [m]
@item @code{tunnelSoilThickness} @tab the thickness of the soil surrounding the tunnel [m]
@item @code{tunnelMaterial} @tab the material of the tunnel (default concrete)
@item @code{soilMaterial} @tab the material of the soil surrounding the tunnel (default soil)
@item @code{tunnelOffsetX} @tab the horizontal offset of the tunnel with respect to the beam line
@item @code{tunnelOffsetY} @tab the vertical offset of the tunnel with respect to the beam line
@item @code{tunnelFloorOffset} @tab the offset of the tunnel floor from the centre of the tunnel
@item @code{samplerDiameter} @tab the diameter of the sampler planes (default is 2 times @code{tunnelRadius})
@item @code{blmRad} @tab the radius of the beam loss monitor cylinders
@item @code{blmLength} @tab the lengths of the beam loss monitor cylinders
@item @code{includeIronMagFields} @tab whether to include the magnetic fields in the magnet iron (default=1)

@end multitable
@*



The following options influence the tracking:

@multitable @columnfractions .3 .7
@item @code{maximumTrackingTime}  @tab maximum tracking time for entire simulation
@item @code{deltaChord }          @tab chord finder precision
@item @code{deltaIntersection }   @tab boundary intersection precision
@item @code{chordStepMinimum }    @tab minimum step size
@item @code{lengthSafety }        @tab element overlap safety
@item @code{minimumEpsilonStep}   @tab minimum relative error acceptable in stepping
@item @code{maximumEpsilonStep}   @tab maximum relative error acceptable in stepping
@item @code{deltaOneStep}         @tab set position error acceptable in an integration steps
@c @item @code{doTwiss}              @tab calculate twiss parameters if set. Not set by default
@c @item @code{synchRescale}         @tab if @code{doTwiss} is set, then the magnets are rescaled to account for energy loss by synchrotron radiation
@end multitable
@*

The following options influence the physics:

@multitable @columnfractions .3 .7
@item @code{physicsList}          @tab determines the set of physics processes used
@item @code{thresholdCutCharged } @tab charged particle cutoff energy
@item @code{thresholdCutPhotons } @tab photon cutoff energy
@item @code{stopTracks }          @tab if set, tracks are terminated after interaction
@item                             @tab with material and energy deposit recorded
@item @code{synchRadOn}          @tab turn on Synchrotron Radiation process
@item @code{srTrackPhotons}      @tab whether to track the SR photons
@item @code{srLowX}              @tab sets lowest energy of SR to X*E_critical
@item @code{srLowGamE}           @tab lowest energy of propagating SR photons
@item @code{srMultiplicity}         @tab a factor multiplying the number of synchrotron radiation photons
@item @code{prodCutPhotons}      @tab standard overall production cuts for photons
@item @code{prodCutPhotonsP}     @tab precision production cuts for photons in @code{element}
@item @code{prodCutElectrons}    @tab standard overall production cuts for electrons
@item @code{prodCutElectronsP}   @tab precision production cuts for electrons in @code{element}
@item @code{prodCutPositrons}    @tab standard overall production cuts for positrons
@item @code{prodCutPositronsP}   @tab precision production cuts for positrons in @code{element}
@item @code{turnOnCerenkov}      @tab if set, Cerenkov radiation is turned on
@item @code{defaultRangeCut}     @tab the default predicted range at which a particle is cut. Default is 0.7mm
@item @code{gammaToMuFe}         @tab the cross section enhancement factor for the gamma to muon process
@item @code{annihiToMuFe}        @tab the cross section enhancement factor for the electron-positron annihilation to muon process
@item @code{eetoHadronsFe}       @tab the cross section enhancement factor for the electron-positron annihilation to hadrons process
@item @code{useEMLPB}            @tab if set, electromagnetic lead particle biasing is used. Default is 0
@item @code{LPBFraction}         @tab the fraction of EM processes in which electromagnetic lead particle biasing is used, from 0.0=never to 1.0=always


@end multitable
@*



The following options influence the generation:
@multitable @columnfractions .3 .7
@item @code{randomSeed }          @tab seed for the random number generator;
@item                             @tab setting to -1 uses the system clock to generate the seed
@item @code{ngenerate}            @tab number of primary particles fired when in batch mode
@end multitable
@*


The following options influence the output
@multitable @columnfractions .4 .6
@item @code{elossHistoBinWidth}    @tab bin width in metres for the energy loss histogram
@item @code{sensitiveBeamlineComponents} @tab if set, energy losses in beamline components are recorded in the energy loss histogram. Set by default
@item @code{sensitiveBeamPipe} @tab if set, energy losses in the beam pipe are recorded in the energy loss histogram. Set by default
@item @code{sensitiveBLMs} @tab if set, energy losses in the beam loss monitors are recorded in the energy loss histogram. Set by default
@item @code{storeTrajectory} @tab if set, the trajectories are stored in the root file
@item @code{storeMuonTrajectories} @tab if set, the muon trajectories are stored in the root file
@item @code{storeNeutronTrajectories} @tab if set, the neutron trajectories are stored in the root file
@item @code{trajCutGTZ} @tab do not store any trajectories who end less than this z distance
@item @code{trajCutLTR} @tab do not store any trajectories who end outside of this radius
@end multitable


Miscellaneous options:
@multitable @columnfractions .3 .7
@item @code{nperfile}             @tab number of events recorded per file in ROOT output
@item @code{nlinesIgnore}         @tab number of lines to skip when reading bunch files
@end multitable
@*

For a more detailed description of how the option influence the tracking see
@ref{Physics}
@*

@node beam
@subsection @code{beam}

The parameters related to the beam are set with the @code{beam} command

@code{beam, <name>=value, ...;}


There is a set of predefined distribution types that can be generated 
@footnote{see src/BDSBunch.cc for more details}.
In this case one needs to specify the following parameters:
@itemize @bullet
@item @code{particle}    - particle name, "e-","e+","gamma","proton", etc
@item @code{energy}      - particle energy
@item @code{distrType}   - type of distribution
@c commented out because never used in the simulation
@c @item @code{nparticles}  - number of particles
@end itemize

and, in addition, other parameters that depend on the distribution type that
has been chosen:


@enumerate
@item Global options:
@itemize @bullet
@item @code{X0} - Offset of distribution centre in @code{x}[m]
@item @code{Y0} - Offset of distribution centre in @code{y}[m]
@item @code{Z0} - Offset of distribution centre in @code{z}[m]
@item @code{Xp0} - Angular offset from nominal axis in @code{x-z} plane
@item @code{Yp0} - Angular offset from nominal @code{z} axis in @code{y-z} plane
@item @code{Zp0} - Directional flag: Zp0 < 0 points the particle back up the beamline
@item @code{T0} - Global time offset [s]
@end itemize

@item @code{distrType}=''reference'': a reference orbit particle, which has the offsets in the global options so 
@itemize @bullet
@item @code{X0} - Offset of distribution centre in @code{x}[m]
@item @code{Y0} - Offset of distribution centre in @code{y}[m]
@item @code{Z0} - Offset of distribution centre in @code{z}[m]
@item @code{Xp0} - Angular offset from nominal axis in @code{x-z} plane
@item @code{Yp0} - Angular offset from nominal @code{z} axis in @code{y-z} plane
@item @code{Zp0} - Directional flag: Zp0 < 0 points the particle back up the beamline
@item @code{T0} - Global time offset [s]
@end itemize

@item @code{distrType}=''gauss'': a gaussian in @code{x}, @code{x'}, @code{y},
      @code{y'}, energy and time, with given widths:
@itemize @bullet
@item @code{sigmaX} - RMS of @code{x} distribution in [m]
@item @code{sigmaXp} - RMS of @code{x'} distribution in [rad]
@item @code{sigmaY} - RMS of @code{y} distribution in [m]
@item @code{sigmaYp} - RMS of @code{y'} distribution in [rad]
@item @code{sigmaE} - RMS of energy distribution divided by nominal beam kinetic energy
@item @code{sigmaT} - RMS of time distribution in [s]
@end itemize

@item @code{distrType}=''gausstwiss'': a gaussian bunch defined by twiss parameters @cite{4}, emittance, energy and time:
@itemize @bullet
@item @code{betx} - @math{\beta_x} in [m]
@item @code{bety} - @math{\beta_y} in [m]
@item @code{alfx} - @math{\alpha_x}
@item @code{alfy} - @math{\alpha_y}
@item @code{emitx} - @math{\epsilon_x} in [m] 
@item @code{emity} - @math{\epsilon_y} in [m] 
@item @code{sigmaE} - RMS of energy distribution divided by nominal beam kinetic energy
@item @code{sigmaT} - RMS of time distribution in [s]
@end itemize

@item @code{distrType}=''gaussmatrix'': a gaussian bunch defined by @math{N(N-1)/2} elements of sigma matrix, 
this overwrites @code{sigmaX}, @code{sigmaXp}, @code{sigmaY}, @code{sigmaYp}, @code{sigmaE} and @code{sigmaT} 
variables if they have been defined previously. It will also recalculate the Twiss parameters. 
@itemize @bullet
@item @code{sigmaMN} - @math{\sigma_{MN}} in [m] where @code{M} range between @code{1} and @code{6} and @code{N} 
ranges between @code{M} and @code{6}
@end itemize 

@item @code{distrType}=''eshell'': an infinitely thin elliptic shell (locus) in @code{x,x'} and @code{y,y'} with given semiaxes:
@itemize @bullet
@item @code{shellX}
@item @code{shellXp}
@item @code{shellY}
@item @code{shellYp}
@item @code{sigmaE}
@end itemize

@item @code{distrType}=``ring'': in the @code{x}, @code{y} plane the particles
are uniformly distributed in @math{r} and in @math{\phi} inside a ring
with inner radius @code{Rmin} and outer
radius @code{Rmax}. @code{x'}, @code{y'} and time are exactly @code{Xp0},@code{Yp0} and @code{T0} respectively for each generated particle. 
The kinetic energy distribution is a gaussian of width @code{sigmaE} centered 
about the nominal beam kinetic energy.
@itemize @bullet
@item @code{Rmin}, @code{Rmax} - inner and outer radius in [m]
@item @code{sigmaE} - RMS energy spread [GeV] 
@end itemize

@c @code{Square}
@c @code{beam,distrType="square";}

@c @code{Circle}
@c @code{beam,distrType="circle";}
@end enumerate


Example:

@example

@code{beam, particle="e+", energy=100*MeV, distrType="gauss", sigmaX=0.01,
            sigmaXp=0.1, sigmaY=0.01, sigmaYp=0.1;}
@c @code{beam, particle="e+", energy=100*MeV, nparticles=1000, distrType="gauss", sigmaX=0.01, sigmaXp=0.1, sigmaY=0.01, sigmaYp=0.1;}

@end example

In alternative, one can pass to the simulation a file containing a list of
particles to be generated. 
For more details see @ref{Bunch description formats}.

@node sample and csample
@subsection @code{sample} and @code{csample}

To record the tracking results one uses the @code{sample} and @code{csample}
commands. To insert a sampling plane before @code{<element>} the following
command should be used:

@code{sample, range=<element>;}

Example:

@example

@code{sample, range=d;}

@end example

To put a cylindrical sampler of length @code{l0} (in [m]) around element
@code{<element>} at distance @code{r0} (in [m]) the following command should
be used:

@code{csample, range=<element>, r=r0, l=l0;}

Samplers output the following parameters at the specified location:
@multitable @columnfractions 0.1 0.35 0.15 0.4
@item E  @tab Energy[GeV] @tab E0 @tab Energy at last scatter[Gev]
@item X  @tab Global X position @tab s @tab path length
@item Y  @tab Global Y position @tab t @tab time of flight
@item Z  @tab Global Z position @tab t0 @tab time of flight at last scatter
@item Xp @tab Global angle in x-z @tab trackID @tab trackID of particle
@item Yp @tab Global angle in y-z @tab weight @tab weight of track
@item Zp @tab 1-sqrt(Xp@math{^2}+Yp@math{^2}) 
      @tab parentID @tab trackID of parent particle
@item x @tab Relative x position @tab x0 @tab x at last scatter
@item y @tab Relative y position @tab y0 @tab y at last scatter
@item z @tab Relative z position @footnote{See @ref{Known Issues}} 
      @tab z0 @tab z at last scatter
@item xp @tab Relative angle in x-z @tab xp0 @tab xp at last scatter
@item yp @tab Relative angle in y-z @tab yp0 @tab yp at last scatter
@item zp @tab 1-sqrt(xp@math{^2}+yp@math{^2}) @tab zp0 @tab xp at last scatter
@item nEvent @tab Event number @tab partID @tab PDG particle identifier
@end multitable

@node dump
@subsection @code{dump}
Used in conjuction with @code{option,fifo=<filename>} to output the bunch 
distribution at a given point. If the specified output file is a fifo, the 
distribution can be modified by an external program before being piped back in 
to continue tracking. This is useful for including 
multi-particle effects such as wakefields at given points in the lattice.

@example
@code{dump,range=@var{dumpMarker1}}
@code{option,fifo="/tmp/temp.dat"}
@end example 

Output is in the standard Guineapig format, with a header line stating the 
number of particles to be output. The file to be read back should be in the 
same format as this.

@node use
@subsection @code{use}

@code{use} command selects the beam line for study

@example

@code{use, period=l1,range=q1/q2}

@end example


@c cccccccccccccccccccccccccccccccccccccccccc
@c
@c cccccccccccccccccccccccccccccccccccccccccc

@node Visualization,Physics,Lattice,Top
@chapter Visualization

When @code{BDSIM} is invoked in interactive mode, the run is controlled by the Geant4 shell. A visualization macro
should be then provided. A simple visualization macro is include with the 
distribution, and is outlined below.

@c @float

@example
# Invoke the OGLSX driver
#  Create a scene handler and a viewer for the OGLSX driver
/vis/open OGLIX

# Create an empty scene
/vis/scene/create

# Add detector geometry to the current scene
/vis/scene/add/volume

# Attach the current scene handler
# to the current scene (omittable)
/vis/sceneHandler/attach

# Add trajectories to the current scene
#  Note: This command is not necessary in exampleN03,
#        since the C++ method DrawTrajectory() is
#        described in the event action.

/vis/viewer/set/viewpointThetaPhi 90 90
# /vis/drawVolume
#/vis/scene/add/trajectories
# /tracking/storeTrajectory 0
#/vis/viewer/zoom
/tracking/storeTrajectory 1
#
# for BDS:
#/vis/viewer/zoom 300
#/vis/viewer/set/viewpointThetaPhi 3 45

@end example

@c @end float


By default the macro is read from the file named @code{vis.mac} located in the 
current directory. The name of the file with the macro can also be passed
via the @code{vis_mac} switch.

@example

@code{bdsim --file=line.gmad --vis_mac=my_macro.mac}

@end example

In interactive mode all the Geant4 interactive comamnds are available. For instance, to fire 100 particles type 

@code{/run/beamOn 100}


and to end the session type

@code{exit}

To display help menu

@code{/help};

For more details see @cite{1}.

@c float Figure, fig1
@c caption{ An screenshot with an example BDSIM visualization }
@c image{Screenshot,,4in}
@c end float

@c @include visualization.texi

@c cccccccccccccccccccccccccccccccccccccccccc
@c
@c cccccccccccccccccccccccccccccccccccccccccc

@node Physics, Output, Visualization, Top
@chapter Physics

@code{BDSIM} can exploit all physics processes that come with Geant4. In addition fast tracking inside multipole 
magnets is provided. More detailed description of the physics is given below.

@section physicsList option

Depending on for what sort of problem @code{BDSIM} is used, different sorts of physics processes should be turned on. 
This processes are grouped into so called ``physics lists''. The physics list is specified by the @code{physicsList} 
option in the input file, e.g.

@example

option, physicsList="em_standard";

@end example




Several predefined physics lists are available. Some physics lists allow biasing and re-weighting for some processes e.g. muon production. To set the amount of biasing see @ref{option}. Further details of the QGSP, FTFP and BERT hadronic physics lists can be found in @cite{5}. 

@multitable @columnfractions .3 .7
@item @code{standard}          @tab transportation of primary particles only
@item @code{em_standard}       @tab transportation of primary particles, ionization, bremsstrahlung, Cerenkov, multiple scattering 
@item @code{em_low}            @tab the same but using low energy electromagnetic models
@item @code{em_muon}           @tab em_standard plus muon production processes with biased muon cross-sections
@item @code{lw}                @tab list for laser wire simulation - standard electromagnetic 
@item                          @tab physics and "laser wire" physics which is Compton Scattering with total cross-section renormalized to 1.
@item @code{merlin}            @tab transportation of primary particles, and the following processes for electrons: multiple scattering, ionisation, and bremsstrahlung
@item @code{hadronic_standard} @tab @code{em_standard} plus fission, neutron capture, neutron and proton elastic and inelastic scattering
@item @code{hadronic_muon} @tab @code{hadronic_standard} plus muon production processes with biased muon cross-sections
@item @code{hadronic_QGSP_BERT} @tab @code{em_standard} plus hadron physics using the quark gluon string plasma (QGSP) model and the Bertini cascade model (BERT)
@item @code{hadronic_QGSP_BERT_muon} @tab @code{hadron_QGSP_BERT} plus muon production processes with biased muon cross-sections
@item @code{hadronic_QGSP_BERT_HP_muon} @tab @code{hadron_QGSP_BERT_muon} with high precision neutron tracking
@item @code{hadronic_FTFP_BERT} @tab @code{em_standard} plus hadron physics using the Fritiof model followed by Reggion cascade and Precompound and evaporation models for the nucleus de-excitation (FTFP) model and the Bertini cascade model (BERT)
@item @code{hadronic_FTFP_BERT_muon} @tab @code{hadronic_FTFP_BERT} plus muon production processes with biased muon cross-sections



@end multitable

By default the @code{standard} physics List is used


@section Transportation 

The transportation follows the scheme: the step length is selected which is defined either by the distance of the particle
to the boundary of the ``logical volume'' it is currently in (which could be, e.g. field boundary, material boundary or
boundary between two adjacent elements) or by the mean free path of the activated processes. Then the particle is pushed
to the new position and secondaries are generated if necessary. Each volume has an associated transportation algorithm.
For an on-energy particle travelling close to the optical axis of a quadrupole, dipole or a drift, standard matrix transportation 
algorithms are used @cite{4}. For multipoles of higher orders and for off-axis/energy particles Runge-Kutta methods are used.


@section Tracking accuracy

The following options influence the tracking accuracy

@multitable @columnfractions .3 .7
@item @code{chordStepMinimum} @tab minimum chord length for the step
@item @code{deltaIntersection} @tab determines the precision of locating the point of intersection
of the particle trajectory with the boundary and hence the error in the path length in each 
volume. This may influence the results especially in the case when EM fields are present.
@item @code{deltaChord} @tab
@item @code{lengthSafety} @tab all volumes will have an additional overlap of this length
@item @code{thresholdCutCharged} @tab energy below which charged particles are not tracked
@item @code{thresholdCutPhotons} @tab energy below which photons are not tracked
@end multitable

@c cccccccccccccccccccccccccccccccccccccccccc
@c
@c cccccccccccccccccccccccccccccccccccccccccc

@node Output, Geometry, Physics, Top
@chapter Output Analysis

During the execution the following things are recorded:

@itemize @bullet
@item energy deposition along the beamline
@item sampler hits
@end itemize

If the output format is @code{ASCII} i.e. if @code{BDSIM} was invoked with the 
@code{--output=ascii} option, then the output file ``output.txt'' containing the hits will be written which has rows like

@code{#hits PDGtype p[GeV/c] x[micron] y[micron] z[m] x'[microrad] y'[microrad]}

@code{11 250 -4.72907 -5.86656 5.00001e-06 0 0}

@code{11 250 -8.17576 -4.99729 796.001 0.320334 -0.126792}

If @code{ROOT} output is used then the @code{root} files @code{output_0.root}, 
@code{output_1.root} etc. will be created with each file containing the number of events given by @code{nperfile} option.
@c
@c @float Figure, fig2
@c @caption{ An example ROOT Analysis}
@c @image{Screenshot_root,,4in}
@c @end float
@c
The file contains the energy loss histogram and a tree for every sampler in 
the line with self-explanatory branch names.

@node Geometry,Fields,Output,Top
@appendix Geometry description formats

The element with user-defined physical geometry is defined by

@code{<element_name> : element, geometry=format:filename, attributes}

for example,

@code{colli : element, geometry="gmad:colli.geo"}


@section @code{gmad} format

@code{gmad} is a simple format used as G4geometry wrapper. It can be used for specifying more or less
simple geometries like collimators. Available shapes are:

@multitable @columnfractions .5 .5
@item @example 
Box @{
x0=x_origin,
y0=y_origin,
z0=z_origin,
x=xsize,
y=ysize,
z=zsize,
phi=Euler angle for rotation,
theta=Euler angle for rotation,
psi=Euler angle for rotation,
material=MaterialName
@}
@end example

@tab

@example 
Tubs @{
x0=x_origin,
y0=y_origin,
z0=z_origin,
rmin=inner radius,
rmax=outer radius,
z=zsize,
phi=Euler angle for rotation,
theta=Euler angle for rotation,
psi=Euler angle for rotation,
material=MaterialName
@}
@end example

@item
@example
Cons @{
x0=x_origin,
y0=y_origin,
z0=z_origin,
rmin1=inner radius at start,
rmax1=outer radius at start,
rmin2=inner radius at end,
rmax2=outer radius at end,
z=zsize,
material=MaterialName,
phi=Euler angle for rotation,
theta=Euler angle for rotation,
psi=Euler angle for rotation,
phi0=angle for start of sector,
dphi=angle swept by sector
@}

@end example

@tab

@example
Trd @{
x0=x_origin,
y0=y_origin,
z0=z_origin,
x1=half length at wider side,
x2=half length at narrower side,
y1=half length at wider side,
y2=half length at narrower side,
z=zsize,
phi=Euler angle for rotation,
theta=Euler angle for rotation,
psi=Euler angle for rotation,
material=MaterialName
@}
@end example
@end multitable

A file can contain several objects which will be placed sequentially into the 
volume, A user has to make sure that there is no overlap between them.


@section @code{mokka}

@include mokka.texi

@section @code{gdml}
GDML is a XML schema for detector description.
GDML will be supported as an external format starting from next release.
@c Ha! Third time we've said that... oh well

@c cccccccccccccccccccccccccccccccccccccccccc
@c
@c cccccccccccccccccccccccccccccccccccccccccc

@node Fields,Bunch description formats,Geometry,Top
@appendix Field description formats

The element with user-defined magnetic field map is defined by the command 

@code{<element_name> : element, bmap=format:filename, attributes}

for example,

@code{ colli : element, bmap=XY:colli.bmap}

Supported formats are ``mokka'' and ``XY''. In the latter case a text files
must be specified, where each rows must have the following format:
x y Bx By Bz


@node Bunch description formats, Known Issues, Fields, Top
@appendix Bunch description formats


For compatibility with other simulation codes following bunch formats can be read. For example,
to use the file @code{distr.dat} as input the beam definition should look like

@example

beam, particle="e-",distrType="guineapig_bunch",distrFile="distr.dat"

@end example


The formats currently supported are listed below:
@footnote{see src/BDSBunch.cc for more details}

@itemize @bullet
@item @code{guineapig_bunch} : E[GeV] x[mum] y[mum] z[mum] x'[murad] y'[murad]
@item @code{guineapig_slac} : E[GeV] x'[rad] y'[rad] z[mum] x[nm] y[nm]
@item @code{guineapig_pairs} : E[GeV] x'[rad] y'[rad] z'[rad] x[nm] y[nm] z[nm]
(here a particle with E>0 is assumed to be an electron and with E<0 a positron.)
@item @code{cain} : ....
@end itemize

A custom distribution file format can be specified in the form

@example
distrType="field1[unit1]:field1[unit1]:...
@end example

The allowed values for fields/units are: .....


For instance:

@example

beam,  particle="e-",
       energy=ener * GeV,
@c commented out because never used in simulation
@c       nparticles=1e+3,
       distrType="pt[1]:E[GeV]:xp[rad]:yp[rad]:z[mum]:x[nm]:y[nm]",
       distrFile="bunches/beam.dat";

@end example

@node Known Issues, References, Bunch description formats, Top
@appendix Known Issues

A bug is present where a sampler attached to a bending magnet (RBend/SBend) will
cause the magnetic field to fail to be set. The reference frame rotates 
correctly but the particle trajectory does not follow. To work around this 
issue, samplers should be attached to a marker rather than directly to the 
magnet. For example:

@example
@code{dip: sbend,l=1*m, angle=0.1;}
@code{temp: line=(dip);}
@code{use, period=temp;}
@code{sample, range=dip;}
@end example

should be replaced by:

@example
@code{dip: sbend,l=1*m, angle=0.1;}
@code{dipMark: marker;}
@code{temp: line=(dipMark,dip);}
@code{use, period=temp;}
@code{sample, range=dipMark;}
@end example

Samplers attached to multiple instances of the same element incorrectly 
register hits only from the first instance in all such samplers. For example:

@example
@code{drift1: drift, l=1*m;}
@code{mark1: marker;}
@code{line1: line=(mark1,drift1,mark1,drift1);}
@code{sample, range=mark1[1];}
@code{sample, range=mark1[2];}
@end example

will incorrectly record hits at @code{mark1[1]} in the sampler attached to 
@code{mark1[2]}. To avoid this, samplers should be attached to uniquely named 
elements.

There is a known issue with the @var{z} parameter output to samplers. As 
particle data is output at the z location of the sampler, when the global 
position is transformed from global to relative coordinates @var{z} is 
identically zero. For a description of a particle's longitudinal position in 
the bunch, please use the parameter @var{s} instead.
@c cccccccccccccccccccccccccccccccccccccccccc
@c
@c cccccccccccccccccccccccccccccccccccccccccc

@node References, , Known Issues, Top
@unnumbered References

@itemize @w{}

@anchor{1}
@item [1]
Geant4 User's Guide, @uref{http://geant4.cern.ch/support/userdocuments.shtml}

@anchor{2}
@item [2] 
Root User's Guide, @uref{http://root.cern.ch/drupal/content/users-guide}

@anchor{3}
@item [3]
MAD-X User's Guide, @* @uref{http://madx.web.cern.ch/madx/madX/doc/usrguide/uguide.html}

@anchor{4}
@item [4]
for example 'Basic course on Accelerator optics' by Schmuesser, Rossbach, CERN Accelerator school

@anchor{5}
@item [5]
A. Ribon et. al., Status of @code{GEANT4} hadronic physics for the simulation of LHC experiments at the start of LHC physics program, CERN-LCGAPP-2010-02, July 20 2010

@c @anchor{6}
@c @item [6]
@c G. Blair, Simulation of the CLIC Beam Delivery System Using BDSIM, CLIC Note 509



@end itemize

@bye
@c  LocalWords:  dir texi lastupdate uref http www org html helpgnu ifinfo ftp
@c  LocalWords:  dvi hurd toc gvc URL GTK XmHTML xs nl ripley NT com gettext Qt
@c  LocalWords:  GUI libstdc Docbook SGML libc sed STL Gforth GNUstep TCSH Perl
@c  LocalWords:  Ghostscript PIC GCC Texinfo grep dc bc ethernet GDB IP CIFS CU
@c  LocalWords:  SMB SVGA Khoros Automake OpenStep diff roff Smail tron veritas
@c  LocalWords:  cxref ctrace API LilyPond xephem labanotation LessTif outliner
@c  LocalWords:  Hypercard morphing SeeMe ICQ Diffie Helman RSA SSLv TLSv GPL
@c  LocalWords:  OpenBIOS BIOS LILO dbase dbased Harbour harbour WYSIWYG ISBN
@c  LocalWords:  TruePrint Baecker siff sif cs arizona edu TR ps mt sulaco MP
@c  LocalWords:  RTSP MPEG jasonw ariel ucs unimelb AU stutz dsl TCL Javascript
@c  LocalWords:  Rexx GnuGo jhall isd Biomorph regexp eval gd gnuorg
